// api/process-pdf.js
import { createRequire } from 'module';
import fs from 'fs';

const require = createRequire(import.meta.url);

// Helper function to convert Dropbox links to direct download links
async function getDirectDownloadURL(url) {
  if (url.includes('dropbox.com')) {
    if (url.includes('dl=1')) return url;
    if (url.includes('dl=0')) return url.replace('dl=0', 'dl=1');
    return url.includes('?') ? `${url}&dl=1` : `${url}?dl=1`;
  }
  return url;
}

export default async function handler(req, res) {
  try {
    const { pdf, jobId = Date.now() } = req.query;
    if (!pdf) {
      return res.status(400).json({ error: "Missing 'pdf' query parameter" });
    }

    const directURL = await getDirectDownloadURL(pdf);
    console.log(`Processing PDF: ${directURL} (Job ID: ${jobId})`);

    // Use tempdir for storing processed data
    const outputDir = `/tmp/processed-pdfs`;
    const outputFile = `${outputDir}/${jobId}.json`;

    // Create directory if it doesn't exist
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // Download the PDF
    console.log('Downloading PDF...');
    const response = await fetch(directURL, {
      redirect: 'follow',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
        'Accept': 'application/pdf,application/octet-stream,*/*'
      }
    });

    if (!response.ok) {
      return res.status(400).json({ error: `Failed to download: ${response.status}` });
    }

    const pdfBuffer = Buffer.from(await response.arrayBuffer());
    console.log(`Downloaded ${pdfBuffer.length} bytes`);

    // Parse the PDF
    try {
      const pdfParse = require('pdf-parse');
      const data = await pdfParse(pdfBuffer);
      const chunks = splitTextIntoChunks(data.text);
      
      // Store the chunks for later processing
      fs.writeFileSync(outputFile, JSON.stringify({
        jobId,
        pdfUrl: pdf,
        chunks,
        timestamp: new Date().toISOString()
      }));
      
      return res.status(200).json({
        message: "PDF processed successfully",
        jobId,
        chunkCount: chunks.length,
        // Return a signed URL for accessing the chunks directly from client
        embedUrl: `/api/embed-chunks?jobId=${jobId}`
      });
    } catch (err) {
      console.error('PDF parsing error:', err);
      return res.status(500).json({ error: 'PDF parsing failed', details: err.message });
    }
  } catch (error) {
    console.error('Handler error:', error);
    return res.status(500).json({ error: error.message });
  }
}

// Helper function to split text into chunks
function splitTextIntoChunks(text, chunkSize = 800, overlap = 100) {
  const chunks = [];
  let start = 0;
  
  while (start < text.length) {
    const end = Math.min(start + chunkSize, text.length);
    chunks.push({
      pageContent: text.slice(start, end),
      metadata: { source: 'VA Guide' }
    });
    start = end - overlap;
  }
  
  return chunks;
}
